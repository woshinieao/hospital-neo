#include <math.h> 
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string.h>
#include <linux/i2c.h>
#include <linux/i2c-dev.h> 
#include <unistd.h>
#include <sys/time.h>
#include "libfahw.h"


typedef union
{ 
	unsigned int i;
	float f;
} value;

enum {TEMP,HUMI};
#define noACK 0
#define ACK 1
//adr command r/w
#define STATUS_REG_W 0x06 //000 0011 0
#define STATUS_REG_R 0x07 //000 0011 1
#define MEASURE_TEMP 0x03 //000 0001 1
#define MEASURE_HUMI 0x05 //000 0010 1
#define RESET 0x1e //000 1111 0

#define SHT15_TSCKL			100	/* (nsecs) clock low */
#define SHT15_TSCKH			100	/* (nsecs) clock high */
#define SHT15_TSU			150	/* (nsecs) data setup time */
#define SHT15_TSRST			11	/* (msecs) soft reset time */



#define GPIO_IN                 (1) 
#define GPIO_OUT                (2) 

// Value
#define GPIO_LOW                (0)
#define GPIO_HIGH               (1)

#define GPIO_DATA                (3)
#define GPIO_SCLK               (5)

int DATA=0;
int SCK = 0;

void  _nop_()
{
	usleep(10000);
}

int setDataValue(int value)
{
	return setGPIOValue(GPIO_DATA,value);
}

int setClkValue(int value)
{
	return setGPIOValue(GPIO_SCLK,value);
}




//----------------------------------------------------------------------------------
char s_write_byte(unsigned char value)
{
	unsigned char i,error=0;
	
	setGPIODirection(GPIO_DATA,GPIO_OUT);
	for (i=0x80;i>0;i/=2) //shift bit for masking
	{ 
		if (i & value) DATA=1; //masking value with i , write to SENSI-BUS
		else DATA=0;
		setDataValue(DATA);
		_nop_(); //observe setup time
		SCK=1; //clk for SENSI-BUS
		setClkValue(SCK);
		_nop_();_nop_();_nop_(); //pulswith approx. 5 us
		SCK=0;
		setClkValue(SCK);
		_nop_(); //observe hold time
	}

	DATA=1; //release DATA-line
	setDataValue(DATA);
	
	setGPIODirection(GPIO_DATA,GPIO_IN);
	_nop_(); //observe setup time
	SCK=1; //clk #9 for ack
	setClkValue(SCK);
	_nop_();

	DATA =getGPIOValue(GPIO_DATA);	
	error=DATA; //check ack (DATA will be pulled down by SHT11)
	//printf(" s_write_byte error:%d\n",error);



	SCK=0;
	setClkValue(SCK);
	return error; //error=1 in case of no acknowledge
}

char s_read_byte(unsigned char ack)
{
	unsigned char i,val=0;
	setGPIODirection(GPIO_DATA,GPIO_IN);
	DATA=1; //release DATA-line
	for (i=0x80;i>0;i/=2) //shift bit for masking
	{ 
		SCK=1; //clk for SENSI-BUS
		setClkValue(SCK);
		DATA= getGPIOValue(GPIO_DATA);
		if (DATA) val=(val | i); //read bit
		SCK=0;
		setClkValue(SCK);
	}
	//printf("==================== s_read_byte:%02x\n",val);

	setGPIODirection(GPIO_DATA,GPIO_OUT);
	DATA=!ack; //in case of "ack==1" pull down DATA-Line
	setDataValue(DATA);
	_nop_(); //observe setup time
	SCK=1; //clk #9 for ack
	setClkValue(SCK);
	_nop_();_nop_();_nop_(); //pulswith approx. 5 us
	SCK=0;
	setClkValue(SCK);
	_nop_(); //observe hold time
	
	DATA=1; //release DATA-line
	setDataValue(DATA);
	return val;
}


void s_transstart(void)
//----------------------------------------------------------------------------------
// generates a transmission start
// _____ ________
// DATA: |_______|
// ___ ___
// SCK : ___| |___| |______
{
	setGPIODirection(GPIO_DATA,GPIO_OUT);
	setGPIODirection(GPIO_SCLK,GPIO_OUT);
	DATA=1; SCK=0;

	setClkValue(SCK);
	setDataValue(DATA);


	_nop_();
	SCK=1;
	setClkValue(SCK);
	_nop_();
	DATA=0;
	setDataValue(DATA);
	_nop_();
	SCK=0;
	setClkValue(SCK);
	_nop_();_nop_();_nop_();
	SCK=1;
	setClkValue(SCK);
	_nop_();
	DATA=1;
	setDataValue(DATA);
	_nop_();
	SCK=0;
	setClkValue(SCK);
}



void s_connectionreset(void)
//----------------------------------------------------------------------------------
// communication reset: DATA-line=1 and at least 9 SCK cycles followed by transstart
// _____________________________________________________ ________
// DATA: |_______|
// _ _ _ _ _ _ _ _ _ ___ ___
// SCK : __| |__| |__| |__| |__| |__| |__| |__| |__| |______| |___| |______
{
	unsigned char i;
	setGPIODirection(GPIO_SCLK,GPIO_OUT);
	setGPIODirection(GPIO_DATA,GPIO_OUT);
	DATA=1; SCK=0; //Initial state
	setDataValue(DATA);
	setClkValue(SCK);
	for(i=0;i<9;i++) //9 SCK cycles
	{ 
		SCK=1;
		setClkValue(SCK);
		_nop_();
		SCK=0;
		setClkValue(SCK);
		_nop_();
	}
	s_transstart(); //transmission start
}


char s_softreset(void)
{
	unsigned char error=0;
	s_connectionreset(); //reset communication
	error+=s_write_byte(RESET); //send RESET-command to sensor
	return error; //error=1 in case of no response form the sensor
}

char s_read_statusreg(unsigned char *p_value, unsigned char *p_checksum)
{
	unsigned char error=0;
	s_transstart(); //transmission start
	error=s_write_byte(STATUS_REG_R); //send command to sensor
	*p_value=s_read_byte(ACK); //read status register (8-bit)
	*p_checksum=s_read_byte(noACK); //read checksum (8-bit)
	return error; //error=1 in case of no response form the sensor
}
//----------------------------------------------------------------------------------
char s_write_statusreg(unsigned char *p_value)
{
	unsigned char error=0;
	s_transstart(); //transmission start
	error+=s_write_byte(STATUS_REG_W);//send command to sensor
	error+=s_write_byte(*p_value); //send value of status register
	return error; //error>=1 in case of no response form the sensor
}
//----------------------------------------------------------------------------------
char s_measure(unsigned char *p_value, unsigned char *p_checksum, unsigned char mode)
{
	unsigned char error=0;
	int i=0;
	s_transstart(); //transmission start
	switch(mode)
	{ //send command to sensor
		case TEMP : error+=s_write_byte(MEASURE_TEMP); break;
		case HUMI : error+=s_write_byte(MEASURE_HUMI); break;
		default : break;
	}
	for ( i=0;i<100;i++) 
	{
		if(getGPIOValue(GPIO_DATA)==0) break;
		_nop_();
	}
	if(getGPIOValue(GPIO_DATA))
		error+=1; // or timeout (~2 sec.) is reached

	*(p_value) =s_read_byte(ACK); //read the first byte (MSB)
	*(p_value+1)=s_read_byte(ACK); //read the second byte (LSB)
	*p_checksum =s_read_byte(noACK); //read checksum
	
	printf("p_value:%02x p_value+1:%02x\n",*p_value,*(p_value+1));
	
		return error;
}



void calc_sth11(float *p_humidity ,float *p_temperature)
{ 
	const float C1=-2.0468; // for 12 Bit RH
	const float C2=+0.0367; // for 12 Bit RH
	const float C3=-0.0000015955; // for 12 Bit RH
	const float T1=+0.01; // for 12 Bit RH
	const float T2=+0.00008; // for 12 Bit RH
	float rh=*p_humidity; // rh: Humidity [Ticks] 12 Bit
	float t=*p_temperature; // t: Temperature [Ticks] 14 Bit
	float rh_lin; // rh_lin: Humidity linear
	float rh_true; // rh_true: Temperature compensated humidity
	float t_C; // t_C : Temperature [¡ãC]
	t_C=t*0.01 - 40.1; //calc. temperature[¡ãC]from 14 bit temp.ticks @5V
	rh_lin=C3*rh*rh + C2*rh + C1;
	rh_true=(t_C-25)*(T1+T2*rh)+rh_lin; 

	if(rh_true>100)rh_true=100; //cut if the value is outside of
	if(rh_true<0.1)rh_true=0.1; //the physical possible range
	*p_temperature=t_C; //return temperature [¡ãC]
	*p_humidity=rh_true; //return humidity[%RH]
}



float calc_dewpoint(float h,float t)
{ 
	float k,dew_point ;
	k = (log10(h)-2)/0.4343 + (17.62*t)/(243.12+t);
	dew_point = 243.12*k/(17.62-k);
	return dew_point;
}


int  main()
{
	int board,ret;
	value humi_val,temp_val;
	float dew_point;
	unsigned char error,checksum;
	unsigned char byteHum[2];
	unsigned char byteTem[2];
	 if ((board = boardInit()) < 0) {
		printf("Fail to init board\n");
		return -1;
	}
	
	if ((ret = exportGPIOPin(GPIO_DATA)) == -1) {	  
		  printf("exportGPIOPin() failed\n");
	  }
	
	if ((ret = exportGPIOPin(GPIO_SCLK)) == -1) {	  
		  printf("exportGPIOPin() failed\n");
	  }
	setGPIODirection(GPIO_DATA,GPIO_OUT);
	
	setGPIODirection(GPIO_SCLK,GPIO_OUT);

	s_connectionreset();
	
	while(1)
	{ 
		error=0;
		error+=s_measure(byteHum ,&checksum,HUMI);

		error+=s_measure(byteTem ,&checksum,TEMP); 
		if(error!=0) s_connectionreset(); 
		else
		{ 
			temp_val.i =  (byteTem[0]<<8) +byteTem[1];
			humi_val.i =( byteHum[0]<<8) + byteHum[1];
			humi_val.f=(float)(humi_val.i ); 
			temp_val.f=(float)(temp_val.i ); 
			calc_sth11(&humi_val.f,&temp_val.f); //calculate humidity,
			dew_point=calc_dewpoint(humi_val.f,temp_val.f); //calculate dew point
			//printf("temp:%f humi:%f %% dew point:%f\n",temp_val.f,humi_val.f,dew_point);
						printf("temp:%5.1fC humi:%5.1f%% dew point:%5.1fC  aaa\n",temp_val.f,humi_val.f,dew_point);
		}
		sleep(1);

	}
	return 0;
}


